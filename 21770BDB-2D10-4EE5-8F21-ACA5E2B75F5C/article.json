{
  "articleType" : 0,
  "attachments" : [

  ],
  "cids" : {

  },
  "content" : "## 目的\n\n因為 git 本身允許修改 commit，本文章指導如何在 macOS 作業系統中使用 GPG 對 git 提交進行數字簽名。透過這種方式，提交在 GitHub 或其它 git 程式碼管理系統上將被標記為已驗證，從而增加提交的可信度。🎉\n\n## 配置步驟\n\n### 安裝 GPG\n\n透過 Homebrew 安裝 GPG：\n\n```ssh\nbrew install gpg\n```\n\n安裝 GPG 工具，之後可以使用它來生成和管理金鑰對。\n\n檢查現有的 GPG 金鑰\n\n在生成新的 GPG 金鑰對之前，首先檢查是否已經存在 GPG 金鑰。執行以下命令：\n\n```ssh\ngpg --list-secret-keys --keyid-format LONG\n如果命令沒有返回任何金鑰，說明你還沒有配置 GPG 金鑰。\n% gpg --list-secret-keys --keyid-format LONG\ngpg: directory '/Users/UserName/.gnupg' created\ngpg: /Users/UserName/.gnupg/trustdb.gpg: trustdb created\n```\n\n如果返回了金鑰資訊，則可以跳過生成 GPG 金鑰對的步驟。\n\n```ssh\n% gpg --list-secret-keys --keyid-format LONG\n[keyboxd]\n---------\nsec   ed25519/E7175B0CAF8C4FE0 2024-09-16 [SC]\n      *****************\nuid                 [ultimate] UserName <email@exmple.com>\nssb   cv25519/88CAD4AB29BCB4B5 2024-09-16 [E]\n```\n\n後面也可以透過這條命令檢視已有的金鑰\n\n### 生成 GPG 金鑰對\n\n生成新金鑰對：\n\n```ssh\ngpg --full-generate-key --expert\n# 使用 --expert 選項可以支援 ECC \n# 加密演算法。如果選擇 RSA 演算法，則無需使用 --expert 選項\n```\n\n* 選擇金鑰型別：選擇 (9) ECC (sign and encrypt) *default*\n* 選擇演算法：選擇 (1) Curve 25519\n* 設定金鑰過期時間：0 為永不過期\n* 確認資訊 Key is valid for? (0)  Is this correct? (y/N)\n* 設定使用者 ID：確保郵箱地址與commit郵箱一致\n* 設定密碼\n\n\n### 匯出公鑰\n\n獲取金鑰列表：\n\n```ssh\ngpg --list-secret-keys --keyid-format LONG\n```\n\n示例輸出：\n\n```ssh\n% gpg --list-secret-keys --keyid-format LONG\ngpg: checking the trustdb\ngpg: marginals needed: 3  completes needed: 1  trust model: pgp\ngpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u\n[keyboxd]\n---------\nsec   ed25519/E7175B0CAF8C4FE0 2024-09-16 [SC]\n      *****************\nuid                 [ultimate] UserName <email@exmple.com>\nssb   cv25519/88CAD4AB29BCB4B5 2024-09-16 [E]\n```\n\n記下 sec ed25519/ 後面的 GPG Key ID，例如 E7175B0CAF8C4FE0\n\n匯出公鑰：\n\n```ssh\ngpg --armor --export E7175B0CAF8C4FE0\n```\n\n將匯出的公鑰複製並貼上到 GitHub 的 GPG 金鑰新增頁面上。\n\n```ssh\n-----BEGIN PGP PUBLIC KEY BLOCK-----\nPUBLIC KEY\n-----END PGP PUBLIC KEY BLOCK-----\n```\n\n### 配置 Git\n\n設定 gpg-agent 環境變數：\n\n```ssh\necho 'export GPG_TTY=$(tty)' >> ~/.zshrc\nsource ~/.zshrc\n```\n\n這裡只寫了Oh my zsh的，其它工具自行改一下\n\n配置 Git 使用 GPG 簽名：\n\n當前目錄\n\n```ssh\ngit config user.signingkey E7175B0CAF8C4FE0\ngit config commit.gpgsign true\n```\n\n全域性\n\n```ssh\ngit config --global user.signingkey E7175B0CAF8C4FE0\ngit config --global commit.gpgsign true\n```\n\n注意替換為實際的 GPG Key ID。\n\n對於不需要 GPG 簽名的 Git 倉庫，進入倉庫目錄並執行：\n\n```ssh\ngit config commit.gpgsign false\n```\n\n祝程式設計愉悅！",
  "contentRendered" : "<h2>目的</h2>\n<p>因為 git 本身允許修改 commit，本文章指導如何在 macOS 作業系統中使用 GPG 對 git 提交進行數字簽名。透過這種方式，提交在 GitHub 或其它 git 程式碼管理系統上將被標記為已驗證，從而增加提交的可信度。🎉</p>\n<h2>配置步驟</h2>\n<h3>安裝 GPG</h3>\n<p>透過 Homebrew 安裝 GPG：</p>\n<pre><code class=\"language-ssh\">brew install gpg\n</code></pre>\n<p>安裝 GPG 工具，之後可以使用它來生成和管理金鑰對。</p>\n<p>檢查現有的 GPG 金鑰</p>\n<p>在生成新的 GPG 金鑰對之前，首先檢查是否已經存在 GPG 金鑰。執行以下命令：</p>\n<pre><code class=\"language-ssh\">gpg --list-secret-keys --keyid-format LONG\n如果命令沒有返回任何金鑰，說明你還沒有配置 GPG 金鑰。\n% gpg --list-secret-keys --keyid-format LONG\ngpg: directory '/Users/UserName/.gnupg' created\ngpg: /Users/UserName/.gnupg/trustdb.gpg: trustdb created\n</code></pre>\n<p>如果返回了金鑰資訊，則可以跳過生成 GPG 金鑰對的步驟。</p>\n<pre><code class=\"language-ssh\">% gpg --list-secret-keys --keyid-format LONG\n[keyboxd]\n---------\nsec   ed25519/E7175B0CAF8C4FE0 2024-09-16 [SC]\n      *****************\nuid                 [ultimate] UserName &lt;email@exmple.com&gt;\nssb   cv25519/88CAD4AB29BCB4B5 2024-09-16 [E]\n</code></pre>\n<p>後面也可以透過這條命令檢視已有的金鑰</p>\n<h3>生成 GPG 金鑰對</h3>\n<p>生成新金鑰對：</p>\n<pre><code class=\"language-ssh\">gpg --full-generate-key --expert\n# 使用 --expert 選項可以支援 ECC \n# 加密演算法。如果選擇 RSA 演算法，則無需使用 --expert 選項\n</code></pre>\n<ul>\n<li>選擇金鑰型別：選擇 (9) ECC (sign and encrypt) <em>default</em></li>\n<li>選擇演算法：選擇 (1) Curve 25519</li>\n<li>設定金鑰過期時間：0 為永不過期</li>\n<li>確認資訊 Key is valid for? (0)  Is this correct? (y/N)</li>\n<li>設定使用者 ID：確保郵箱地址與commit郵箱一致</li>\n<li>設定密碼</li>\n</ul>\n<h3>匯出公鑰</h3>\n<p>獲取金鑰列表：</p>\n<pre><code class=\"language-ssh\">gpg --list-secret-keys --keyid-format LONG\n</code></pre>\n<p>示例輸出：</p>\n<pre><code class=\"language-ssh\">% gpg --list-secret-keys --keyid-format LONG\ngpg: checking the trustdb\ngpg: marginals needed: 3  completes needed: 1  trust model: pgp\ngpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u\n[keyboxd]\n---------\nsec   ed25519/E7175B0CAF8C4FE0 2024-09-16 [SC]\n      *****************\nuid                 [ultimate] UserName &lt;email@exmple.com&gt;\nssb   cv25519/88CAD4AB29BCB4B5 2024-09-16 [E]\n</code></pre>\n<p>記下 sec ed25519/ 後面的 GPG Key ID，例如 E7175B0CAF8C4FE0</p>\n<p>匯出公鑰：</p>\n<pre><code class=\"language-ssh\">gpg --armor --export E7175B0CAF8C4FE0\n</code></pre>\n<p>將匯出的公鑰複製並貼上到 GitHub 的 GPG 金鑰新增頁面上。</p>\n<pre><code class=\"language-ssh\">-----BEGIN PGP PUBLIC KEY BLOCK-----\nPUBLIC KEY\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>\n<h3>配置 Git</h3>\n<p>設定 gpg-agent 環境變數：</p>\n<pre><code class=\"language-ssh\">echo 'export GPG_TTY=$(tty)' &gt;&gt; ~/.zshrc\nsource ~/.zshrc\n</code></pre>\n<p>這裡只寫了Oh my zsh的，其它工具自行改一下</p>\n<p>配置 Git 使用 GPG 簽名：</p>\n<p>當前目錄</p>\n<pre><code class=\"language-ssh\">git config user.signingkey E7175B0CAF8C4FE0\ngit config commit.gpgsign true\n</code></pre>\n<p>全域性</p>\n<pre><code class=\"language-ssh\">git config --global user.signingkey E7175B0CAF8C4FE0\ngit config --global commit.gpgsign true\n</code></pre>\n<p>注意替換為實際的 GPG Key ID。</p>\n<p>對於不需要 GPG 簽名的 Git 倉庫，進入倉庫目錄並執行：</p>\n<pre><code class=\"language-ssh\">git config commit.gpgsign false\n</code></pre>\n<p>祝程式設計愉悅！</p>\n",
  "created" : 767620120.432725,
  "externalLink" : "",
  "hasAudio" : false,
  "hasVideo" : false,
  "id" : "21770BDB-2D10-4EE5-8F21-ACA5E2B75F5C",
  "link" : "/21770BDB-2D10-4EE5-8F21-ACA5E2B75F5C/",
  "slug" : "",
  "tags" : {
    "mac" : "mac",
    "ssh" : "ssh"
  },
  "title" : "使用 GPG 簽名 git commits"
}